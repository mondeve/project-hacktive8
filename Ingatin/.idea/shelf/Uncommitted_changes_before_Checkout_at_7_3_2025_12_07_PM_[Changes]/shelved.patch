Index: app/src/main/java/id/co/brainy/ui/screen/task/TaskScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package id.co.brainy.ui.screen.task\r\n\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.DateRange\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport id.co.brainy.R\r\nimport id.co.brainy.ui.ViewModelFactory\r\nimport id.co.brainy.ui.common.UiState\r\nimport id.co.brainy.ui.components.ButtonCategory\r\nimport id.co.brainy.ui.components.headerTask\r\nimport id.co.brainy.ui.theme.BrainyTheme\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TaskScreen(\r\n    navController: NavController,\r\n    taskId: String? = null\r\n) {\r\n\r\n    var title by remember { mutableStateOf(\"\") }\r\n    var description by remember { mutableStateOf(\"\") }\r\n\r\n    var selectCategory by remember { mutableStateOf<String?>(null) }\r\n\r\n    val categories = listOf(\"Work\", \"Academy\")\r\n\r\n    val context = LocalContext.current\r\n    val factory = remember { ViewModelFactory(context) }\r\n    val viewModel: TaskViewModel = viewModel(factory = factory)\r\n\r\n    val createTask by viewModel.createTask.collectAsState()\r\n\r\n    val date by viewModel.date.observeAsState(\"\")\r\n    val time by viewModel.time.observeAsState(\"\")\r\n\r\n    val dateTime by viewModel.dateTime.observeAsState(\"\")\r\n\r\n    val taskDetailState by viewModel.taskDetail.collectAsState()\r\n\r\n    val showDialog = remember { mutableStateOf(false) }\r\n\r\n\r\n    LaunchedEffect(taskId) {\r\n        taskId?.let {\r\n            viewModel.getTaskById(it)\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(taskDetailState) {\r\n        if (taskId != null) {\r\n            when (val state = taskDetailState) {\r\n                is UiState.Success -> {\r\n                    state.data?.firstOrNull()?.let { task ->\r\n                        title = task.title ?: \"\"\r\n                        description = task.desc ?: \"\"\r\n                        selectCategory = task.category ?: \"\"\r\n                        // Format waktu & tanggal jika datanya tersedia\r\n                        task.dueDate?.let { dueDate ->\r\n                            val parts = dueDate.split(\" \")\r\n                            if (parts.size == 2) {\r\n                                viewModel.setDate(parts[0])\r\n                                viewModel.setTime(parts[1])\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                is UiState.Error -> {\r\n                    Toast.makeText(context, \"Failed to load task\", Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                else -> Unit\r\n            }\r\n        }\r\n    }\r\n\r\n    val editTask by viewModel.editTask.collectAsState()\r\n\r\n    LaunchedEffect(editTask) {\r\n        if (taskId != null) {\r\n            when (val state = editTask) {\r\n                is UiState.Success -> {\r\n                    Toast.makeText(context, \"Task updated!\", Toast.LENGTH_SHORT).show()\r\n                    navController.popBackStack()\r\n                }\r\n\r\n                is UiState.Error -> {\r\n                    Toast.makeText(context, \"Failed: ${state.errorMessage}\", Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n                else -> Unit\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    LaunchedEffect(createTask) {\r\n        when (val state = createTask) {\r\n            is UiState.Success -> {\r\n                Toast.makeText(context, \"Task created!\", Toast.LENGTH_SHORT).show()\r\n                navController.popBackStack()\r\n            }\r\n\r\n            is UiState.Error -> {\r\n                Toast.makeText(context, \"Failed: ${state.errorMessage}\", Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            else -> Unit\r\n        }\r\n    }\r\n\r\n    if (showDialog.value) {\r\n        AlertDialog(\r\n            onDismissRequest = { showDialog.value = false },\r\n            title = {\r\n                Text(\r\n                    text = if (taskId != null) \"Confirm Update\" else \"Confirm Create\",\r\n                    style = MaterialTheme.typography.bodyMedium.copy(\r\n                        fontWeight = FontWeight.SemiBold,\r\n                        color = MaterialTheme.colorScheme.tertiary\r\n                    )\r\n                )\r\n            },\r\n            text = {\r\n                Text(\r\n                    text = if (taskId != null)\r\n                        \"Are you sure you want to update this task?\"\r\n                    else\r\n                        \"Are you sure you want to create this task?\"\r\n                )\r\n            },\r\n            confirmButton = {\r\n                Button(\r\n                    onClick = {\r\n                        showDialog.value = false\r\n                        val selectedCategory = selectCategory ?: \"\"\r\n                        val finalDateTime = dateTime ?: \"\"\r\n\r\n                        if (taskId != null) {\r\n                            viewModel.editTask(\r\n                                taskId = taskId,\r\n                                category = selectedCategory,\r\n                                dueDate = finalDateTime,\r\n                                title = title,\r\n                                desc = description,\r\n                                context = context\r\n                            )\r\n                        } else {\r\n                            viewModel.createTask(\r\n                                category = selectedCategory,\r\n                                dueDate = finalDateTime,\r\n                                title = title,\r\n                                desc = description,\r\n                                context = context\r\n                            )\r\n                        }\r\n                    }\r\n                ) {\r\n                    Text(\r\n                        text = if (taskId != null) \"Update\" else \"Create\",\r\n                        style = MaterialTheme.typography.bodyMedium.copy(\r\n                            fontWeight = FontWeight.SemiBold,\r\n                            color = MaterialTheme.colorScheme.tertiary\r\n                        )\r\n                    )\r\n                }\r\n            },\r\n            dismissButton = {\r\n                Button(\r\n                    onClick = { showDialog.value = false }\r\n                ) {\r\n                    Text(\r\n                        text = \"Cancel\",\r\n                        style = MaterialTheme.typography.bodyMedium.copy(\r\n                            fontWeight = FontWeight.SemiBold,\r\n                            color = MaterialTheme.colorScheme.onPrimary\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .verticalScroll(rememberScrollState())\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n\r\n        ) {\r\n        headerTask(\r\n            titleHeader = if (taskId != null) \"Edit Task\" else \"Create Task\",\r\n            navController = navController\r\n        )\r\n        Spacer(modifier = Modifier.height(31.dp))\r\n        TitleTextField(\"Title\")\r\n        OutlinedTextField(\r\n            value = title,\r\n            onValueChange = {\r\n                title = it\r\n            },\r\n            placeholder = {\r\n                Text(\r\n                    text = \"Title\", color = Color.LightGray\r\n                )\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(bottom = 22.dp, top = 4.dp)\r\n                .border(\r\n                    width = 2.dp, color = Color.LightGray, shape = RoundedCornerShape(14.dp)\r\n                ),\r\n            shape = RoundedCornerShape(14.dp),\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),\r\n        )\r\n        TitleTextField(\"Deadline\")\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(top = 8.dp, bottom = 22.dp, start = 8.dp, end = 8.dp),\r\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = time,\r\n                onValueChange = {},\r\n                placeholder = { Text(\"Time\") },\r\n                readOnly = true,\r\n                trailingIcon = {\r\n                    IconButton(onClick = {\r\n                        viewModel.selectTime(context)\r\n                    }) {\r\n                        Icon(\r\n                            painter = painterResource(R.drawable.ic_clock),\r\n                            contentDescription = \"Select Time\",\r\n                            modifier = Modifier.size(24.dp)\r\n                        )\r\n                    }\r\n                },\r\n                modifier = Modifier\r\n                    .weight(0.4F)\r\n                    .border(\r\n                        width = 2.dp, color = Color.LightGray, shape = RoundedCornerShape(14.dp)\r\n                    ),\r\n                shape = RoundedCornerShape(14.dp),\r\n            )\r\n            OutlinedTextField(\r\n                value = date,\r\n                onValueChange = {},\r\n                placeholder = { Text(\"Date\") },\r\n                readOnly = true,\r\n                trailingIcon = {\r\n                    IconButton(onClick = {\r\n                        viewModel.selectDate(context)\r\n                    }) {\r\n                        Icon(\r\n                            imageVector = Icons.Default.DateRange,\r\n                            contentDescription = \"Select date\"\r\n                        )\r\n                    }\r\n                },\r\n                modifier = Modifier\r\n                    .weight(0.6F)\r\n                    .border(\r\n                        width = 2.dp, color = Color.LightGray, shape = RoundedCornerShape(14.dp)\r\n                    ),\r\n                shape = RoundedCornerShape(14.dp),\r\n            )\r\n\r\n        }\r\n\r\n        TitleTextField(\"Category\")\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(top = 8.dp, bottom = 22.dp),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            categories.forEach { category ->\r\n                ButtonCategory(\r\n                    btnTitle = category,\r\n                    onCategoryClick = { selected ->\r\n                        selectCategory = selected\r\n                    },\r\n                    isSelected = selectCategory == category\r\n                )\r\n            }\r\n        }\r\n        TitleTextField(\"Description\")\r\n        OutlinedTextField(\r\n            value = description,\r\n            onValueChange = {\r\n                description = it\r\n            },\r\n            placeholder = {\r\n                Text(\r\n                    text = \"Enter description\", color = Color.LightGray\r\n                )\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(200.dp)\r\n                .padding(top = 4.dp, bottom = 32.dp)\r\n                .border(\r\n                    width = 2.dp, color = Color.LightGray, shape = RoundedCornerShape(14.dp)\r\n                ),\r\n            shape = RoundedCornerShape(14.dp),\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),\r\n            singleLine = false,\r\n        )\r\n        Button(\r\n            onClick = {\r\n                showDialog.value = true\r\n            },\r\n            modifier = Modifier.fillMaxWidth(),\r\n            shape = RoundedCornerShape(12.dp),\r\n            colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.primary)\r\n        ) {\r\n            Text(\r\n                text = if (taskId != null) \"Update Task\" else \"Create Task\",\r\n                color = Color.White,\r\n                fontWeight = FontWeight.SemiBold\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun TitleTextField(title: String) {\r\n    Text(\r\n        text = title, style = MaterialTheme.typography.titleSmall.copy(\r\n            fontWeight = FontWeight.SemiBold, color = MaterialTheme.colorScheme.tertiary\r\n        ), modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun TaskScreenPreview() {\r\n    BrainyTheme {\r\n        Surface(\r\n            modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background\r\n        ) {\r\n            val navController = rememberNavController()\r\n            TaskScreen(navController)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/id/co/brainy/ui/screen/task/TaskScreen.kt b/app/src/main/java/id/co/brainy/ui/screen/task/TaskScreen.kt
--- a/app/src/main/java/id/co/brainy/ui/screen/task/TaskScreen.kt	(revision cf11be6b8d4b9b541e47667a393039887441e8fa)
+++ b/app/src/main/java/id/co/brainy/ui/screen/task/TaskScreen.kt	(date 1747833673079)
@@ -216,7 +216,7 @@
                         text = "Cancel",
                         style = MaterialTheme.typography.bodyMedium.copy(
                             fontWeight = FontWeight.SemiBold,
-                            color = MaterialTheme.colorScheme.onPrimary
+                            color = MaterialTheme.colorScheme.tertiary
                         )
                     )
                 }
